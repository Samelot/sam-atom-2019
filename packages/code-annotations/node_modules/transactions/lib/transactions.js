'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var registry = new Map();

var register = exports.register = function register(up, down) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$bidirectional = _ref.bidirectional,
        bidirectional = _ref$bidirectional === undefined ? false : _ref$bidirectional,
        _ref$name = _ref.name,
        name = _ref$name === undefined ? null : _ref$name;

    registry.set(up, {
        inverse: down,
        name: name || up.name + '-' + down.name
    });

    if (bidirectional) {
        registry.set(down, {
            inverse: up,
            name: (name || down.name + '-' + up.name) + 'Inverse'
        });
    }
};

var clearRegistry = exports.clearRegistry = function clearRegistry() {
    registry.clear();
};

var transaction = exports.transaction = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        for (var _len = arguments.length, tasks = Array(_len), _key = 0; _key < _len; _key++) {
            tasks[_key] = arguments[_key];
        }

        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, task, i, completedTasks, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _task, inverses, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, inverse;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context2.prev = 3;
                        _iterator = tasks[Symbol.iterator]();

                    case 5:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                            _context2.next = 13;
                            break;
                        }

                        task = _step.value;

                        if (registry.has(task)) {
                            _context2.next = 10;
                            break;
                        }

                        i = tasks.indexOf(task) + 1;
                        throw new Error('Could not find inverse for ' + i + '. task. ' + ('Code: ' + task));

                    case 10:
                        _iteratorNormalCompletion = true;
                        _context2.next = 5;
                        break;

                    case 13:
                        _context2.next = 19;
                        break;

                    case 15:
                        _context2.prev = 15;
                        _context2.t0 = _context2['catch'](3);
                        _didIteratorError = true;
                        _iteratorError = _context2.t0;

                    case 19:
                        _context2.prev = 19;
                        _context2.prev = 20;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }

                    case 22:
                        _context2.prev = 22;

                        if (!_didIteratorError) {
                            _context2.next = 25;
                            break;
                        }

                        throw _iteratorError;

                    case 25:
                        return _context2.finish(22);

                    case 26:
                        return _context2.finish(19);

                    case 27:
                        completedTasks = [];
                        _iteratorNormalCompletion2 = true;
                        _didIteratorError2 = false;
                        _iteratorError2 = undefined;
                        _context2.prev = 31;
                        _iterator2 = tasks[Symbol.iterator]();

                    case 33:
                        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                            _context2.next = 75;
                            break;
                        }

                        _task = _step2.value;
                        _context2.prev = 35;
                        _context2.next = 38;
                        return _task();

                    case 38:
                        completedTasks.push(_task);
                        _context2.next = 72;
                        break;

                    case 41:
                        _context2.prev = 41;
                        _context2.t1 = _context2['catch'](35);

                        console.debug('rolling back because:', _context2.t1.message);
                        inverses = completedTasks.map(function (task) {
                            return registry.get(task).inverse;
                        }).reverse();
                        _iteratorNormalCompletion4 = true;
                        _didIteratorError4 = false;
                        _iteratorError4 = undefined;
                        _context2.prev = 48;
                        _iterator4 = inverses[Symbol.iterator]();

                    case 50:
                        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                            _context2.next = 57;
                            break;
                        }

                        inverse = _step4.value;
                        _context2.next = 54;
                        return inverse();

                    case 54:
                        _iteratorNormalCompletion4 = true;
                        _context2.next = 50;
                        break;

                    case 57:
                        _context2.next = 63;
                        break;

                    case 59:
                        _context2.prev = 59;
                        _context2.t2 = _context2['catch'](48);
                        _didIteratorError4 = true;
                        _iteratorError4 = _context2.t2;

                    case 63:
                        _context2.prev = 63;
                        _context2.prev = 64;

                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }

                    case 66:
                        _context2.prev = 66;

                        if (!_didIteratorError4) {
                            _context2.next = 69;
                            break;
                        }

                        throw _iteratorError4;

                    case 69:
                        return _context2.finish(66);

                    case 70:
                        return _context2.finish(63);

                    case 71:
                        return _context2.abrupt('return', _context2.t1);

                    case 72:
                        _iteratorNormalCompletion2 = true;
                        _context2.next = 33;
                        break;

                    case 75:
                        _context2.next = 81;
                        break;

                    case 77:
                        _context2.prev = 77;
                        _context2.t3 = _context2['catch'](31);
                        _didIteratorError2 = true;
                        _iteratorError2 = _context2.t3;

                    case 81:
                        _context2.prev = 81;
                        _context2.prev = 82;

                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }

                    case 84:
                        _context2.prev = 84;

                        if (!_didIteratorError2) {
                            _context2.next = 87;
                            break;
                        }

                        throw _iteratorError2;

                    case 87:
                        return _context2.finish(84);

                    case 88:
                        return _context2.finish(81);

                    case 89:
                        return _context2.abrupt('return', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                            var inverses, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, inverse;

                            return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            inverses = tasks.map(function (task) {
                                                return registry.get(task).inverse;
                                            }).reverse();
                                            _iteratorNormalCompletion3 = true;
                                            _didIteratorError3 = false;
                                            _iteratorError3 = undefined;
                                            _context.prev = 4;
                                            _iterator3 = inverses[Symbol.iterator]();

                                        case 6:
                                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                                _context.next = 13;
                                                break;
                                            }

                                            inverse = _step3.value;
                                            _context.next = 10;
                                            return inverse();

                                        case 10:
                                            _iteratorNormalCompletion3 = true;
                                            _context.next = 6;
                                            break;

                                        case 13:
                                            _context.next = 19;
                                            break;

                                        case 15:
                                            _context.prev = 15;
                                            _context.t0 = _context['catch'](4);
                                            _didIteratorError3 = true;
                                            _iteratorError3 = _context.t0;

                                        case 19:
                                            _context.prev = 19;
                                            _context.prev = 20;

                                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                                _iterator3.return();
                                            }

                                        case 22:
                                            _context.prev = 22;

                                            if (!_didIteratorError3) {
                                                _context.next = 25;
                                                break;
                                            }

                                            throw _iteratorError3;

                                        case 25:
                                            return _context.finish(22);

                                        case 26:
                                            return _context.finish(19);

                                        case 27:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, undefined, [[4, 15, 19, 27], [20,, 22, 26]]);
                        })));

                    case 90:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined, [[3, 15, 19, 27], [20,, 22, 26], [31, 77, 81, 89], [35, 41], [48, 59, 63, 71], [64,, 66, 70], [82,, 84, 88]]);
    }));

    return function transaction() {
        return _ref2.apply(this, arguments);
    };
}();

exports.default = transaction;